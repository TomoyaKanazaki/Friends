//=============================================================================
// 
//  エリア制限のマネージャ処理 [limitereamanager.cpp]
//  Author : 相馬靜雅
// 
//=============================================================================
#include "limitereamanager.h"
#include "debugproc.h"
#include "calculation.h"
#include "manager.h"
#include "game.h"
#include "renderer.h"

//==========================================================================
// マクロ定義
//==========================================================================

//==========================================================================
// 静的メンバ変数宣言
//==========================================================================

//==========================================================================
// コンストラクタ
//==========================================================================
CLimitAreaManager::CLimitAreaManager()
{
	// 値のクリア
	m_nNumAll = 0;	// 総数リセット
	memset(&m_apLimitErea[0], NULL, sizeof(m_apLimitErea));	// エリア制限のオブジェクト
}

//==========================================================================
// デストラクタ
//==========================================================================
CLimitAreaManager::~CLimitAreaManager()
{

}

//==========================================================================
// 生成処理
//==========================================================================
CLimitAreaManager *CLimitAreaManager::Create(void)
{
	// 生成用のオブジェクト
	CLimitAreaManager *pModel = NULL;

	if (pModel == NULL)
	{// NULLだったら

		// メモリの確保
		pModel = DEBUG_NEW CLimitAreaManager;

		if (pModel != NULL)
		{// メモリの確保が出来ていたら

			// 初期化処理
			HRESULT hr = pModel->Init();
			if (FAILED(hr))
			{// 失敗していたら
				return NULL;
			}
		}

		return pModel;
	}

	return NULL;
}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CLimitAreaManager::Init(void)
{
	// 総数リセット
	m_nNumAll = 0;

	return S_OK;
}

//==========================================================================
// 割り当て
//==========================================================================
int CLimitAreaManager::Regist(CLimitArea *pBullet)
{
	int nIdx = 0;
	for (int i = 0; i < mylib_const::MAX_LIMITEREA; i++)
	{
		if (m_apLimitErea[i] != NULL)
		{// 情報があったら
			continue;
		}

		// エリア制限情報割り当て
		m_apLimitErea[i] = pBullet;

		nIdx = i;

		// 総数加算
		m_nNumAll++;
		break;
	}

	return nIdx;
}

//==========================================================================
// 削除
//==========================================================================
void CLimitAreaManager::Delete(int nIdx)
{
	// NULLにする
	m_apLimitErea[nIdx] = NULL;

	// 総数減算
	m_nNumAll--;
}

//==========================================================================
// 終了処理
//==========================================================================
void CLimitAreaManager::Uninit(void)
{
	for (int i = 0; i < mylib_const::MAX_LIMITEREA; i++)
	{
		if (m_apLimitErea[i] != NULL)
		{// 情報があったら
			m_apLimitErea[i] = NULL;
		}
	}

	// 総数
	m_nNumAll = 0;
}

//==========================================================================
// エリア制限の総数取得
//==========================================================================
int CLimitAreaManager::GetNumAll(void)
{
	return m_nNumAll;
}

//==========================================================================
// エリア制限のオブジェクト取得
//==========================================================================
CLimitArea **CLimitAreaManager::GetLimitErea(void)
{
	return m_apLimitErea;
}
