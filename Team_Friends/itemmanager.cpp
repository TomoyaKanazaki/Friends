//=============================================================================
// 
//  アイテムのマネージャ処理 [itemmanager.cpp]
//  Author : 相馬靜雅
// 
//=============================================================================
#include "itemmanager.h"

//==========================================================================
// コンストラクタ
//==========================================================================
CItemManager::CItemManager()
{
	// 値のクリア
	m_nNumAll = 0;	// 総数リセット
	m_ItemList.clear();	// アイテムのリスト
}

//==========================================================================
// デストラクタ
//==========================================================================
CItemManager::~CItemManager()
{

}

//==========================================================================
// 生成処理
//==========================================================================
CItemManager *CItemManager::Create(void)
{
	// 生成用のオブジェクト
	CItemManager *pModel = NULL;

	if (pModel == NULL)
	{// NULLだったら

		// メモリの確保
		pModel = DEBUG_NEW CItemManager;

		if (pModel != NULL)
		{// メモリの確保が出来ていたら

			// 初期化処理
			HRESULT hr = pModel->Init();
			if (FAILED(hr))
			{// 失敗していたら
				return NULL;
			}
		}

		return pModel;
	}

	return NULL;
}

//==========================================================================
// 初期化処理
//==========================================================================
HRESULT CItemManager::Init(void)
{
	// 総数リセット
	m_nNumAll = 0;

	return S_OK;
}

//==========================================================================
// 割り当て
//==========================================================================
void CItemManager::Regist(CItem *pItem)
{
	// アイテムのリストに追加
	m_ItemList.push_back(pItem);

	// 総数加算
	m_nNumAll++;
}

//==========================================================================
// 削除
//==========================================================================
void CItemManager::Delete(CItem *pItem)
{
	// 自分自身をリストから探す
	std::list<CItem*>::iterator itr = std::find(m_ItemList.begin(), m_ItemList.end(), pItem);
	m_ItemList.erase(itr);

	// 総数減算
	m_nNumAll--;
}

//==========================================================================
// 終了処理
//==========================================================================
void CItemManager::Uninit(void)
{
	// クリア
	m_ItemList.clear();

	// 総数
	m_nNumAll = 0;
}

//==========================================================================
// 全て削除
//==========================================================================
void CItemManager::KillAll(void)
{
	std::list<CItem*>::iterator it = m_ItemList.begin();

	// 要素分繰り返し
	while (it != m_ItemList.end())
	{
		// 終了処理
		(*it)->Uninit();

		// 先頭の要素を渡す
		it = m_ItemList.begin();
		m_nNumAll--;
	}

	// クリア
	m_ItemList.clear();

	// 総数
	m_nNumAll = 0;

}

//==========================================================================
// アイテムの総数取得
//==========================================================================
int CItemManager::GetNumAll(void)
{
	return m_nNumAll;
}

//==========================================================================
// アイテムのリスト取得
//==========================================================================
std::list<CItem*> CItemManager::GetList(void)
{
	return m_ItemList;
}
